import * as anchor from "@coral-xyz/anchor";
import { Program, web3 } from "@coral-xyz/anchor";
import { Moonbets } from "../target/types/moonbets";
import { expect } from "chai";
import { before, it } from "node:test";

const wallet = [
  144, 112, 15, 229, 213, 155, 175, 224, 10, 190, 15,
  240, 206, 31, 46, 22, 215, 223, 211, 17, 167, 73,
  70, 197, 160, 53, 84, 39, 35, 205, 53, 198, 11,
  254, 88, 27, 225, 64, 3, 167, 250, 25, 29, 110,
  16, 28, 144, 156, 83, 131, 241, 33, 48, 142, 22,
  232, 252, 119, 43, 109, 220, 57, 4, 88
];

const devnetUrl = "https://api.devnet.solana.com";

// sleep function to wait for VRF callback
const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));


describe("moonbets", () => {
  const connection = new anchor.web3.Connection(devnetUrl, "confirmed");
  const wallet_keypair = anchor.web3.Keypair.fromSecretKey(new Uint8Array(wallet));
  console.log("Wallet public key:", wallet_keypair.publicKey.toBase58());
  
  const provider = new anchor.AnchorProvider(
    connection,
    new anchor.Wallet(wallet_keypair),
    { commitment: "confirmed" }
  );
  
  anchor.setProvider(provider);
  
  const program = anchor.workspace.Moonbets as Program<Moonbets>;
  const payer = wallet_keypair.publicKey;
  console.log("Payer public key:", payer.toBase58());
  
  // Generate a new keypair for testing as an admin
  const adminKeypair = anchor.web3.Keypair.generate();
  
  // Generate a new keypair for testing as a player
  const playerKeypair = anchor.web3.Keypair.generate();
  
  // Accounts and PDAs
  let platformStatsPubkey: anchor.web3.PublicKey;
  let platformVaultPubkey: anchor.web3.PublicKey;
  let playerPubkey: anchor.web3.PublicKey;
  let adminAccountPubkey: anchor.web3.PublicKey;
  let vaultBump: number;
  let playerBump: number;
  
  // VRF related
  let programIdentityPubkey: anchor.web3.PublicKey;
  let identityBump: number;
  let oracleQueue: anchor.web3.PublicKey;
  let vrfProgramAddress: anchor.web3.PublicKey;
  
  // Helper function to airdrop SOL
  async function airdropSol(pubkey: anchor.web3.PublicKey, amount: number = 0.5) {
    const signature = await connection.requestAirdrop(pubkey, amount * anchor.web3.LAMPORTS_PER_SOL);
    await connection.confirmTransaction(signature);
    console.log(`Airdropped ${amount} SOL to ${pubkey.toBase58()}`);
  }
  
  before(async () => {
    // Airdrop SOL to the admin and player for testing
    await airdropSol(adminKeypair.publicKey);
    await airdropSol(playerKeypair.publicKey);
    
    // Find platform vault PDA
    [platformVaultPubkey, vaultBump] = anchor.web3.PublicKey.findProgramAddressSync(
      [Buffer.from("platform_vault")],
      program.programId
    );
    console.log("Platform vault:", platformVaultPubkey.toBase58());
    
    // Find player PDA
    [playerPubkey, playerBump] = anchor.web3.PublicKey.findProgramAddressSync(
      [Buffer.from("playerd"), playerKeypair.publicKey.toBuffer()],
      program.programId
    );
    console.log("Player account:", playerPubkey.toBase58());
    
    // Generate a random platform stats pubkey
    platformStatsPubkey = payer; // anchor.web3.Keypair.generate().publicKey;
    console.log("Platform stats:", platformStatsPubkey.toBase58());
    
    // Find VRF program identity
    [programIdentityPubkey, identityBump] = anchor.web3.PublicKey.findProgramAddressSync(
      [Buffer.from("identity")],
      program.programId
    );
    
    // Setup VRF oracle queue
    oracleQueue = new anchor.web3.PublicKey("Cuj97ggrhhidhbu39TijNVqE74xvKJ69gDervRUXAxGh");

    vrfProgramAddress = new web3.PublicKey("Vrf1RNUjXmQGjmQrQLvJHs9SNkvDJEsRVFPkfSQUwGz");

  });
  
  it("Initializes the platform", async () => {
    await program.methods
      .initializePlatform()
      .accountsStrict({
        admin: wallet_keypair.publicKey,
        platformStats: platformStatsPubkey,
        platformVault: platformVaultPubkey,
        systemProgram: anchor.web3.SystemProgram.programId,
      })
      .rpc();

    await sleep(2000);
    
    // Fetch and verify platform stats
    const platformStats = await program.account.platformStats.fetch(platformStatsPubkey);
    expect(platformStats.isInitialized).to.be.true;
    expect(platformStats.withdrawnToday.toNumber()).to.equal(0);
    expect(platformStats.primaryAdmin.toString()).to.equal(wallet_keypair.publicKey.toString());
    expect(platformStats.adminCount).to.equal(1);
  });
  
  it("Initializes a player", async () => {
    await program.methods
      .initializePlayer()
      .accountsStrict({
        payer: playerKeypair.publicKey,
        player: playerPubkey,
        systemProgram: anchor.web3.SystemProgram.programId,
      })
      .signers([playerKeypair])
      .rpc();

    await sleep(2000);
    
    // Fetch and verify player account
    const player = await program.account.player.fetch(playerPubkey);
    expect(player.lastResult).to.equal(0);
    expect(player.currentBet).to.equal(0);
    expect(player.lastBetAmount.toNumber()).to.equal(0);
    expect(player.pendingWithdrawal.toNumber()).to.equal(0);
    expect(player.wins).to.equal(0);
    expect(player.losses).to.equal(0);
    expect(player.totalGames).to.equal(0);
  });
  
  it("Adds a new admin", async () => {
    // Generate new admin account
    adminAccountPubkey = anchor.web3.Keypair.generate().publicKey;
    
    await program.methods
      .addAdmin()
      .accountsStrict({
        primaryAdmin: wallet_keypair.publicKey,
        platformStats: platformStatsPubkey,
        admin: adminAccountPubkey,
        newAdmin: adminKeypair.publicKey,
        systemProgram: anchor.web3.SystemProgram.programId,
      })
      .rpc();

    await sleep(2000);
    
    // Fetch and verify admin account
    const admin = await program.account.admin.fetch(adminAccountPubkey);
    expect(admin.pubkey.toString()).to.equal(adminKeypair.publicKey.toString());
    expect(admin.isActive).to.be.true;
    
    // Verify admin count increased
    const platformStats = await program.account.platformStats.fetch(platformStatsPubkey);
    expect(platformStats.adminCount).to.equal(2);
  });
  
  it("Admin deposits funds to the platform", async () => {
    const depositAmount = new anchor.BN(1_000_000_000); // 1 SOL
    
    const balanceBefore = await connection.getBalance(platformVaultPubkey);
    
    await program.methods
      .adminDeposit(depositAmount)
      .accountsStrict({
        admin: adminKeypair.publicKey,
        platformVault: platformVaultPubkey,
      })
      .signers([adminKeypair])
      .rpc();

    await sleep(2000);
    
    const balanceAfter = await connection.getBalance(platformVaultPubkey);
    expect(balanceAfter - balanceBefore).to.equal(depositAmount.toNumber());
  });
  
  it("Player places a bet", async () => {
    const betChoice = 3; // Betting on 3
    const betAmount = new anchor.BN(500_000_000); // 0.5 SOL
    const clientSeed = 123; // Random client seed
    
    await program.methods
      .play(betChoice, betAmount, clientSeed)
      .accountsStrict({
        payer: playerKeypair.publicKey,
        player: playerPubkey,
        platformVault: platformVaultPubkey,
        platformStats: platformStatsPubkey,
        oracleQueue: oracleQueue,
        programIdentity: programIdentityPubkey,
        slotHashes: anchor.web3.SYSVAR_SLOT_HASHES_PUBKEY,
        vrfProgram: vrfProgramAddress,
        systemProgram: anchor.web3.SystemProgram.programId,
      })
      .signers([playerKeypair])
      .rpc();

    await sleep(1000);
    
    // Fetch and verify player bet info
    const player = await program.account.player.fetch(playerPubkey);
    expect(player.currentBet).to.equal(betChoice);
    expect(player.lastBetAmount.toNumber()).to.equal(betAmount.toNumber());
  });
  
  // Note: The actual VRF callback cannot be directly tested in this environment
  // as it requires the VRF program to trigger it. In a real test, we would need to:
  // 1. Mock the VRF program callback or
  // 2. Use a devnet integration test with the actual VRF program
  
//   it("Simulates a winning dice roll result", async () => {
//     // This is a simulation since we can't directly call the callback function
//     // In a real scenario, this would be done by the VRF program
    
//     // Mock randomness bytes - would normally come from VRF
//     const mockRandomness = new Uint8Array(32).fill(123);
    
//     // Manually update player state to simulate a win
//     // Note: This is just for testing purposes
//     const player = await program.account.player.fetch(playerPubkey);
//     const userChoice = player.currentBet;
//     const betAmount = player.lastBetAmount;
    
//     // In a real scenario, this would be done automatically by the callback
//     await program.account.player.fetch(playerPubkey).then(async (playerData) => {
//       // Simulate a win
//       await program.methods
//         .callbackRollDice(Array.from(mockRandomness))
//         .accountsStrict({
//           vrfProgramIdentity: ephemeralVrf.consts.VRF_PROGRAM_IDENTITY,
//           player: playerPubkey,
//           platformStats: platformStatsPubkey,
//         })
//         .rpc()
//         .catch(console.error);
//     });
    
//     // Verify player state after the simulated win
//     const updatedPlayer = await program.account.player.fetch(playerPubkey);
//     expect(updatedPlayer.lastResult).to.be.greaterThan(0);
//     expect(updatedPlayer.totalGames).to.equal(1);
    
//     // Note: We cannot precisely predict if this will be a win or loss without access
//     // to the exact randomness generation, but we can check that the state changed
//   });
  
//   it("Player withdraws winnings", async () => {
//     // First, let's simulate a win by directly setting pending withdrawal
//     // This would normally happen through the callback_roll_dice function
//     // For testing, we're simulating a win situation
    
//     // Get player balance before withdrawal
//     const playerBalanceBefore = await connection.getBalance(playerKeypair.publicKey);
    
//     // Attempt withdrawal
//     await program.methods
//       .withdraw()
//       .accountsStrict({
//         payer: playerKeypair.publicKey,
//         player: playerPubkey,
//         platformVault: platformVaultPubkey,
//       })
//       .signers([playerKeypair])
//       .rpc()
//       .catch((err) => {
//         // We might get an error if there's nothing to withdraw, which is expected in some test scenarios
//         console.log("Withdrawal result:", err ? "Error (possibly nothing to withdraw)" : "Success");
//       });
    
//     // Get player balance after withdrawal
//     const playerBalanceAfter = await connection.getBalance(playerKeypair.publicKey);
    
//     // Fetch player account to see if pending withdrawal was reset
//     const player = await program.account.player.fetch(playerPubkey);
//     expect(player.pendingWithdrawal.toNumber()).to.equal(0);
//   });
  
  it("Admin withdraws funds", async () => {
    const withdrawAmount = new anchor.BN(100_000_000); // 0.1 SOL
    
    // Get admin balance before withdrawal
    const adminBalanceBefore = await connection.getBalance(adminKeypair.publicKey);
    
    await program.methods
      .adminWithdraw(withdrawAmount)
      .accountsStrict({
        admin: adminKeypair.publicKey,
        platformVault: platformVaultPubkey,
        platformStats: platformStatsPubkey,
        adminAccount: adminAccountPubkey, // Required for non-primary admin
      })
      .signers([adminKeypair])
      .rpc();

    await sleep(1000);
    
    // Get admin balance after withdrawal
    const adminBalanceAfter = await connection.getBalance(adminKeypair.publicKey);
    
    // Verify the balance increased by the withdrawal amount (minus tx fees)
    expect(adminBalanceAfter).to.be.greaterThan(adminBalanceBefore);
  });
  
  it("Removes an admin", async () => {
    await program.methods
      .removeAdmin()
      .accounts({
        primaryAdmin: wallet_keypair.publicKey,
        platformStats: platformStatsPubkey,
        admin: adminAccountPubkey,
      })
      .rpc();

    await sleep(1000);
    
    // Verify admin was deactivated
    const admin = await program.account.admin.fetch(adminAccountPubkey);
    expect(admin.isActive).to.be.false;
    
    // Verify admin count decreased
    const platformStats = await program.account.platformStats.fetch(platformStatsPubkey);
    expect(platformStats.adminCount).to.equal(1);
  });
  
  // Additional test cases that could be added:
  // - Test maximum bet limits
  // - Test daily withdrawal limits
  // - Test error cases (e.g., unauthorized access)
  // - Test trying to remove primary admin (should fail)
  // - Test reaching maximum admin count
});